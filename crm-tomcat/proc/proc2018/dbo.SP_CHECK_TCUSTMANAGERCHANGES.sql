USE EFCRM
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SP_CHECK_TCUSTMANAGERCHANGES   @IN_SERIAL_NO           INT,            --序列号
                                                @IN_CHECK_FLAG          INT = 1,        --审核标志 1新建2审核通过3审核不通过
                                                @IN_INPUT_MAN           INT = 0         --操作员
WITH ENCRYPTION
AS
    DECLARE @V_MANAGERNAME_BEFORE   NVARCHAR(64), @V_MANAGERNAME_NOW NVARCHAR(64),
            @V_MANAGERID_BEFORE INT, @V_MANAGERID_NOW INT,@V_CUST_ID INT
    DECLARE @V_RET_CODE INT, @IBUSI_FLAG INT,@SBUSI_NAME NVARCHAR(40), @SSUMMARY NVARCHAR(200)
    DECLARE @V_CURR_DATE INT
    SELECT @V_RET_CODE = -50101000, @IBUSI_FLAG = 50101,@V_CURR_DATE=CONVERT(INT,CONVERT(CHAR(8),GETDATE(),112))
    SELECT @SBUSI_NAME = N'客户移交信息审核', @SSUMMARY = N'客户移交信息审核'
    BEGIN TRY
		--IF NOT EXISTS(SELECT 1 FROM TCUSTMANAGERCHANGES WHERE SERIAL_NO = @IN_SERIAL_NO)
		--	RETURN @V_RET_CODE - 1 --客户移交信息记录不存在

    SELECT @V_MANAGERID_BEFORE = MANAGERID_BEFORE,@V_MANAGERNAME_BEFORE = MANAGERNAME_BEFORE ,
           @V_MANAGERID_NOW = MANAGERID_NOW,@V_MANAGERNAME_NOW = MANAGERNAME_NOW,@V_CUST_ID=CUST_ID
		FROM TCUSTMANAGERCHANGES
		WHERE SERIAL_NO = @IN_SERIAL_NO

    BEGIN TRANSACTION
    --如果审核通过则进行客户移交
    IF ISNULL(@IN_CHECK_FLAG,0) = 2
    BEGIN
        IF ISNULL(@V_CUST_ID,0)=0 --客户经理名下所有客户移交
			UPDATE TCustomers SET SERVICE_MAN = @V_MANAGERID_NOW WHERE SERVICE_MAN = @V_MANAGERID_BEFORE
        ELSE --指定客户进行移交
			UPDATE TCustomers SET SERVICE_MAN = @V_MANAGERID_NOW WHERE CUST_ID = @V_CUST_ID
    END
    UPDATE TCUSTMANAGERCHANGES SET CHECK_FLAG=@IN_CHECK_FLAG, CHECK_MAN=@IN_INPUT_MAN,CHECK_DATE=@V_CURR_DATE WHERE SERIAL_NO = @IN_SERIAL_NO
    
    SET @SSUMMARY = N'客户移交信息审核，操作员：' + CAST(@IN_INPUT_MAN AS NVARCHAR(10))
    INSERT INTO TLOGLIST(BUSI_FLAG,BUSI_NAME,OP_CODE,SUMMARY)
        VALUES(@IBUSI_FLAG,@SBUSI_NAME,@IN_INPUT_MAN,@SSUMMARY)
    
    COMMIT TRANSACTION
        RETURN 100
    END TRY
    
    --异常处理
    BEGIN CATCH
        IF @@TRANCOUNT > 0 BEGIN
            ROLLBACK TRANSACTION
        END
        DECLARE @V_ERROR_STR NVARCHAR(1000),@V_ERROR_NUMBER INT,@V_ERROR_SEVERITY INT,@V_ERROR_STATE INT,
                @V_ERROR_PROCEDURE sysname,@V_ERROR_LINE INT,@V_ERROR_MESSAGE NVARCHAR(4000)

        SELECT @V_ERROR_STR = N'Message:%s,Error:%d,Level:%d,State:%d,Procedure:%s,Line:%d',
               @V_ERROR_NUMBER = ERROR_NUMBER(),
               @V_ERROR_SEVERITY = ERROR_SEVERITY(),
               @V_ERROR_STATE = ERROR_STATE(),
               @V_ERROR_PROCEDURE = ERROR_PROCEDURE(),
               @V_ERROR_LINE = ERROR_LINE(),
               @V_ERROR_MESSAGE = ERROR_MESSAGE()

        RAISERROR(@V_ERROR_STR,@V_ERROR_SEVERITY,1,@V_ERROR_MESSAGE,@V_ERROR_NUMBER,@V_ERROR_SEVERITY,@V_ERROR_STATE,
                  @V_ERROR_PROCEDURE,@V_ERROR_LINE)

        RETURN -100
    END CATCH
GO
