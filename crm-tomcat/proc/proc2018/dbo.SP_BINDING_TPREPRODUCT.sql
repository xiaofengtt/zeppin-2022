USE EFCRM
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE SP_BINDING_TPREPRODUCT @IN_PREPRODUCT_ID   INT,    --预发行产品ID
                                        @IN_PRODUCT_ID      INT,    --INTRUST..TPRODUCT.PRODUCT_ID
                                        @IN_INPUT_MAN       INT,   --操作员
                                        @IN_SUB_PRODUCT_ID  INT=0   --子产品ID(INTRUST..TSUBPRODUCT.SUB_PRODUCT_ID)
WITH ENCRYPTION
AS
    SET NOCOUNT ON
    SET @IN_PREPRODUCT_ID = ISNULL(@IN_PREPRODUCT_ID,0)
    SET @IN_PRODUCT_ID = ISNULL(@IN_PRODUCT_ID,0)

    DECLARE @V_RET_CODE INT, @IBUSI_FLAG INT, @SBUSI_NAME NVARCHAR(40), @SSUMMARY NVARCHAR(200)
    DECLARE @V_PRODUCT_ID INT,@V_NEED_CHECK INT
    DECLARE @V_FIRST_MONEY_SCENE INT
    SELECT @V_RET_CODE = -19003000, @IBUSI_FLAG = 19003
    SELECT @SBUSI_NAME = N'绑定预发行产品到业务系统产品', @SSUMMARY = N'绑定预发行产品到业务系统产品'
    SELECT @V_FIRST_MONEY_SCENE=VALUE FROM TSYSCONTROL WHERE FLAG_TYPE='FIRST_MONEY_SCENE'

    IF @IN_PREPRODUCT_ID <> 0 AND NOT EXISTS(SELECT 1 FROM TPREPRODUCT WHERE PREPRODUCT_ID = @IN_PREPRODUCT_ID)
        RETURN -20402001 --记录不存在
    IF @IN_PRODUCT_ID <> 0 AND NOT EXISTS(SELECT 1 FROM INTRUST..TPRODUCT WHERE PRODUCT_ID = @IN_PRODUCT_ID)
        RETURN -20402001 --记录不存在

    BEGIN TRY
    BEGIN TRANSACTION
	--预约是否要求审核 1是
    SELECT @V_NEED_CHECK=ISNULL(MAX(VALUE),0) FROM TSYSCONTROL WHERE FLAG_TYPE='PRECONTRACT_CHECK'
    
    --原有的PRODUCT_ID先取出来，用于更新绑定时，更新预约表
    SELECT @V_PRODUCT_ID=BIND_PRODUCT_ID FROM TPREPRODUCT WHERE PREPRODUCT_ID = @IN_PREPRODUCT_ID
    UPDATE TPREPRODUCT SET BIND_PRODUCT_ID = @IN_PRODUCT_ID,BIND_SUB_PRODUCT_ID=@IN_SUB_PRODUCT_ID WHERE PREPRODUCT_ID = @IN_PREPRODUCT_ID
    --绑定时，把预发行产品的预约配额，也移到正式产品中去（绑定之后，就以正式产品为准，预发行产品则不再起作用）
    IF ISNULL(@V_PRODUCT_ID,0)=0 --初次绑定
    BEGIN
        DECLARE @V_AVAIL_PRECODE INT
        SELECT @V_AVAIL_PRECODE=
                CAST (CASE WHEN ISNULL(MAX(PRE_CODE),'000')>(SELECT ISNULL(MAX(PRE_CODE),'000') FROM TPRECONTRACT WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID)
                            THEN ISNULL(MAX(PRE_CODE),'000')
                            ELSE 
                                (SELECT ISNULL(MAX(PRE_CODE),'000') FROM TPRECONTRACT WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID)
                      END AS INT) +1 
          FROM INTRUST..TPRECONTRACT WHERE PRODUCT_ID=@IN_PRODUCT_ID
          
        DECLARE CUR_FOO CURSOR LOCAL FOR SELECT SERIAL_NO FROM TPRECONTRACT P
                    WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID 
                        AND (ISNULL(CHECK_FLAG,0) NOT IN (1,3) OR @V_NEED_CHECK<>1)
                        AND EXISTS (SELECT * FROM INTRUST..TPRECONTRACT WHERE PRODUCT_ID=@IN_PRODUCT_ID AND PRE_CODE=P.PRE_CODE)
        DECLARE @V_SERIAL_NO INT
        
        OPEN CUR_FOO
        FETCH NEXT FROM CUR_FOO INTO @V_SERIAL_NO
        WHILE @@FETCH_STATUS=0
        BEGIN           
            UPDATE TPRECONTRACT
              SET PRE_CODE=
                CASE WHEN @V_AVAIL_PRECODE<10 THEN '00'+CAST(@V_AVAIL_PRECODE AS VARCHAR) 
                     WHEN @V_AVAIL_PRECODE<100 THEN '0'+CAST(@V_AVAIL_PRECODE AS VARCHAR) 
                     ELSE CAST(@V_AVAIL_PRECODE AS VARCHAR) END
              WHERE SERIAL_NO=@V_SERIAL_NO
            SET @V_AVAIL_PRECODE = @V_AVAIL_PRECODE+1
            FETCH NEXT FROM CUR_FOO INTO @V_SERIAL_NO              
        END
        
        CLOSE CUR_FOO
        DEALLOCATE CUR_FOO
        
		--不要求审核或者已审核的预约信息，同步到信托业务系统
		/*INSERT INTO INTRUST..TPRECONTRACT(BOOK_CODE,PRODUCT_ID, SUB_PRODUCT_ID, CUST_ID, PRE_CODE,
				PRE_MONEY, LINK_MAN, PRE_DATE,VALID_DAYS, END_DATE, PRE_TYPE,PRE_TYPE_NAME,
				PRE_STATUS,PRE_STATUS_NAME,INPUT_MAN,SUMMARY,PRE_NUM,EXP_REG_DATE,CUST_SOURCE,CUST_SOURCE_NAME
				,CHANNEL_TYPE,PREPRODUCT_FLAG)
			SELECT 1,@IN_PRODUCT_ID, SUB_PRODUCT_ID, CUST_ID,PRE_CODE,
				PRE_MONEY,LINK_MAN,PRE_DATE,VALID_DAYS,END_DATE,PRE_TYPE,PRE_TYPE_NAME,
				PRE_STATUS,PRE_STATUS_NAME,INPUT_MAN,SUMMARY,PRE_NUM,EXP_REG_DATE,CUST_SOURCE,CUST_SOURCE_NAME
				,CHANNEL_TYPE,1
				FROM TPRECONTRACT 
				WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID 
					AND (ISNULL(CHECK_FLAG,0) NOT IN (1,3) OR @V_NEED_CHECK<>1) --审核通过，或者是不要求审核
		--把预约信息改为正式产品的预约
		UPDATE TPRECONTRACT SET PRODUCT_ID=@IN_PRODUCT_ID,PREPRODUCT_FLAG=1 WHERE PREPRODUCT_ID = @IN_PREPRODUCT_ID
		*/--预约信息在签约时同步到业务系统，所以此处的预约信息同步注释
		IF NOT EXISTS(SELECT * FROM TTEAMQUOTA WHERE PRODUCT_ID=@IN_PRODUCT_ID) --原产品已做过配额，则预发行产品的配额忽略
		BEGIN
			UPDATE TTEAMQUOTA SET PRODUCT_ID=@IN_PRODUCT_ID,PREPRODUCT_FLAG=1 WHERE PRODUCT_ID=0 AND PREPRODUCT_ID=@IN_PREPRODUCT_ID
			--RAISERROR('被绑定的正式产品，已经进行了预约配额设置',16,1)
		END
		IF NOT EXISTS(SELECT * FROM TPERSONALQUOTA WHERE PRODUCT_ID=@IN_PRODUCT_ID)--个人配额部分
		BEGIN
			UPDATE TPERSONALQUOTA SET PRODUCT_ID=@IN_PRODUCT_ID,PREPRODUCT_FLAG=1 WHERE PRODUCT_ID=0 AND PREPRODUCT_ID=@IN_PREPRODUCT_ID
			--RAISERROR('被绑定的正式产品，已经进行了预约配额设置',16,1)
		END
		UPDATE TPRECONTRACT SET PRODUCT_ID=@IN_PRODUCT_ID,SUB_PRODUCT_ID=@IN_SUB_PRODUCT_ID,PREPRODUCT_FLAG=1 WHERE PREPRODUCT_ID = @IN_PREPRODUCT_ID
		--绑定时，如果现场签约是先资金流程，则把已到账记录同步到INTRUST..TMONEYDATA中
		IF @V_FIRST_MONEY_SCENE=1
		BEGIN
			DECLARE @V_BOOK_CODE INT
			SELECT @V_BOOK_CODE=BOOK_CODE FROM INTRUST..TPRODUCT WHERE PRODUCT_ID=@IN_PRODUCT_ID
			INSERT INTO INTRUST..TMONEYDATA(BOOK_CODE,PRODUCT_ID,SUB_PRODUCT_ID,CUST_ID,TO_MONEY,CITY_SERIAL_NO,CITY_NAME,
                           JK_TYPE,JK_TYPE_NAME,TO_AMOUNT,DZ_DATE,SUMMARY,INPUT_MAN,SBF_SERIAL_NO,CUST_TYPE,CUST_NAME,CHECK_FLAG)
				SELECT @V_BOOK_CODE,@IN_PRODUCT_ID,@IN_SUB_PRODUCT_ID,B.CUST_ID,A.DZ_MONEY,NULL,NULL,
							A.JK_TYPE,A.JK_TYPE_NAME,A.DZ_MONEY,DBO.GETDATEINT(A.DZ_DATE),'预发行产品中同步来的到账记录',@IN_INPUT_MAN,NULL,C.CUST_TYPE,C.CUST_NAME,1
					FROM TPREMONEYDETAIL A LEFT JOIN TPRECONTRACT B ON A.PRE_SERIAL_NO=B.SERIAL_NO
						LEFT JOIN TCustomers C ON C.CUST_ID=B.CUST_ID
					WHERE B.PREPRODUCT_ID=@IN_PREPRODUCT_ID
			--把这个产品的预约状态，由2已到账未审核产品未绑定;3到账未审核产品已绑定
			UPDATE TPRECONTRACT SET FLOW_STATUS=3 WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID AND FLOW_STATUS=2
		END
	END
	ELSE--更改绑定
	BEGIN
		IF EXISTS(SELECT * FROM TPRECONTRACT WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID AND ISNULL(HT_RG_MONEY,0)>0)
			RAISERROR('此产品已有签约合同，不能再更新绑定关系',16,1)
		--不要求审核或者已审核的预约信息，同步到信托业务系统，因初次绑定时已同步过，此时，只做修改
		--UPDATE INTRUST..TPRECONTRACT SET PRODUCT_ID=@IN_PRODUCT_ID
		--	WHERE PRODUCT_ID=@V_PRODUCT_ID AND ISNULL(PREPRODUCT_FLAG,0)=1 --PREPRODUCT_FLAG=1为预发行产品的预约
		IF NOT EXISTS(SELECT * FROM TTEAMQUOTA WHERE PRODUCT_ID=@IN_PRODUCT_ID AND ISNULL(PREPRODUCT_FLAG,0)<>1) --原产品已做过配额，则预发行产品的配额忽略
			UPDATE TTEAMQUOTA SET PRODUCT_ID=@IN_PRODUCT_ID WHERE PRODUCT_ID=@V_PRODUCT_ID AND PREPRODUCT_FLAG=1
		IF NOT EXISTS(SELECT * FROM TPERSONALQUOTA WHERE PRODUCT_ID=@IN_PRODUCT_ID AND ISNULL(PREPRODUCT_FLAG,0)<>1)--个人配额部分
		BEGIN
			UPDATE TPERSONALQUOTA SET PRODUCT_ID=@IN_PRODUCT_ID  WHERE PRODUCT_ID=0 AND PREPRODUCT_ID=@IN_PREPRODUCT_ID AND PREPRODUCT_FLAG=1
		END
		--把预约信息改为正式产品的预约
		--UPDATE TPRECONTRACT SET PRODUCT_ID=@IN_PRODUCT_ID WHERE PRODUCT_ID = @V_PRODUCT_ID AND PREPRODUCT_FLAG=1
		--把预约信息中的绑定产品改正
		UPDATE TPRECONTRACT SET PRODUCT_ID=@IN_PRODUCT_ID,SUB_PRODUCT_ID=@IN_SUB_PRODUCT_ID WHERE PREPRODUCT_ID=@IN_PREPRODUCT_ID
	END
		
    SELECT @SSUMMARY = N'绑定预发行产品到业务系统产品'
    INSERT INTO TLOGLIST(BUSI_FLAG,BUSI_NAME,OP_CODE,SUMMARY)
        VALUES(@IBUSI_FLAG,@SBUSI_NAME,@IN_INPUT_MAN,@SSUMMARY)

    COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
        IF EXISTS (SELECT * FROM MASTER.dbo.syscursors where cursor_name='CUR_FOO')
        BEGIN
			CLOSE CUR_FOO
			DEALLOCATE CUR_FOO
        END

        DECLARE @V_ERROR_STR NVARCHAR(1000),@V_ERROR_NUMBER INT,@V_ERROR_SEVERITY INT,@V_ERROR_STATE INT,
                @V_ERROR_PROCEDURE sysname,@V_ERROR_LINE INT,@V_ERROR_MESSAGE NVARCHAR(4000)

        SELECT @V_ERROR_STR = N'Message:%s,Procedure:%s,Line:%d',
               @V_ERROR_NUMBER = ERROR_NUMBER(),
               @V_ERROR_SEVERITY = ERROR_SEVERITY(),
               @V_ERROR_STATE = ERROR_STATE(),
               @V_ERROR_PROCEDURE = ERROR_PROCEDURE(),
               @V_ERROR_LINE = ERROR_LINE(),
               @V_ERROR_MESSAGE = ERROR_MESSAGE()

        RAISERROR(@V_ERROR_STR,@V_ERROR_SEVERITY,1,@V_ERROR_MESSAGE,@V_ERROR_PROCEDURE,@V_ERROR_LINE)

        RETURN -100
    END CATCH
    RETURN 100
GO
