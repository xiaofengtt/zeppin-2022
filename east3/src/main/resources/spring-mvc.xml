<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">


	<!-- 自动扫描包 ,将带有注解的类 纳入spring容器管理 -->

	<context:component-scan base-package="cn.zeppin.product.itic.backadmin.dao" />
	<context:component-scan base-package="cn.zeppin.product.itic.backadmin.service" />
	<context:component-scan base-package="cn.zeppin.product.itic.backadmin.controller" />
	<context:component-scan base-package="cn.zeppin.product.itic.backadmin.security" />
	<context:component-scan base-package="cn.zeppin.product.itic.web" />

    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
    <!-- 指定自己定义的validator 		
    <mvc:annotation-driven validator="validator"/>
    -->
    <mvc:annotation-driven/>
    <context:annotation-config />
	<mvc:default-servlet-handler/>

	
    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
    <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
    <!--  
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
       
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    -->
    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
    <!--  
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:messages</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    
-->
    <mvc:interceptors>
    	<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    	<!-- 防止CSRF攻击的拦截器 -->
<!--         <mvc:interceptor>   -->
<!--       	  <mvc:mapping path="/**"/>  -->
<!--       	  mvc:exclude-mapping path="/login/**"/    -->
<!--        	    <bean class="cn.zeppin.product.itic.backadmin.interceptor.CSRFInterceptor" />  -->
<!--     	</mvc:interceptor> -->
    	<!-- 过滤非法字符的拦截器 -->
    	
    	<!-- 对接口的参数进行统一数据校验的拦截器 -->
        <mvc:interceptor>  
      	  <mvc:mapping path="/**"/>  
       	 	<bean class="cn.zeppin.product.itic.backadmin.interceptor.CheckParamInterceptor"/> 
    	</mvc:interceptor>  
    </mvc:interceptors>

    <!-- 国际化 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="zh_CN"/>
    </bean>

    <!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
    <!-- Spring4.2之前 
    	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
   
    <!-- Spring4.2之前 
    	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 支持返回json -->

    <!-- 对模型视图添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/views/" 
          p:suffix=".jsp"/>

    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096000"/>
    </bean>

    
    <aop:config proxy-target-class="true"></aop:config>
    
    <!-- 启用shrio授权注解拦截方式
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />  
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	    <property name="exceptionMappings">  
	        <props>  
	            <prop key="org.apache.shiro.authz.UnauthorizedException">  
	                /unauthorized  
	            </prop>  
	            <prop key="org.apache.shiro.authz.UnauthenticatedException">  
	                /unauthenticated  
	            </prop>  
	        </props>  
	    </property>  
	</bean>  
-->
</beans>
