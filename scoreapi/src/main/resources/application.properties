debug=false
logging.level.tk.mybatis=TRACE
#logging.level.org.crazycake.shiro=debug
#mapper接口代理 输入sql语句 logging.level.包名
logging.level.com.study=trace
logging.level.org.springframework.web=DEBUG
logging.level.cn.product.score.mapper = debug
# 数据源基础配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/score?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
spring.datasource.username=root
spring.datasource.password=
# 连接池配置
# 初始化大小，最小，最大
spring.datasource.initialSize=1
spring.datasource.minIdle=1
spring.datasource.maxActive=20

#jackson相关配置
spring.jackson.date-format = yyyy-MM-dd HH:mm:ss
#时区必须要设置
spring.jackson.time-zone= GMT+8
#ALWAYS的意思是即时属性为null，仍然也会输出这个key
spring.jackson.default-property-inclusion=ALWAYS
#true返回时间戳
spring.jackson.serialization.write-dates-as-timestamps = true

#上传文件大小限制
spring.servlet.multipart.maxFileSize=1024MB
spring.servlet.multipart.maxRequestSize=1024MB


#redis
# Redis服务器地址
spring.redis.host= localhost
# Redis服务器连接端口
spring.redis.port= 6379
# 连接池中的最大空闲连接
spring.redis.pool.max-idle= 8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle= 0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active= 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait= -1
# 连接超时时间（毫秒）
spring.redis.timeout= 10000
spring.redis.password=
spring.mvc.favicon.enabled=false

spring.cache.type=redis

#文件存储路径
app.filePath=E://apache-tomcat-8.0.53//wtpwebapps//score

spring.main.allow-bean-definition-overriding=true

#dubbo 消费者配置
# 应用名称，配置模块项目名称即可
spring.application.name=score-api

dubbo.protocol.port=20080
dubbo.protocol.name=dubbo

dubbo.application.name=${spring.application.name}
dubbo.scan.base-packages=cn.product.score

## Dubbo 注册地址 N/A表示直连方式
#dubbo.registry.address=N/A
#embedded.dubbo.url = dubbo://localhost:10080/cn.product.score.api.service.ControlService
embedded.zookeeper.port = 2181
dubbo.registry.address=zookeeper://127.0.0.1:${embedded.zookeeper.port}

scoreserver.service.version = 1.0.0
scoreserver.service.group = scorecoreGroup

scoreserver.service.apigroup = scoreapiGroup
server.port=18080






